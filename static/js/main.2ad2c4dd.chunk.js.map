{"version":3,"sources":["sounds/click2.mp3","sounds/winOrTie.mp3","sounds/lost.mp3","logo.svg","constants.js","utils.js","Board.js","minimax.js","styles.js","ResultModal.js","TicTacToe.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GAME_STAES","SCORES","1","0","2","GAME_MODES","easy","medium","difficult","switchPlayer","player","getRandomInt","min","max","Math","ceil","floor","random","Board","grid","getEmptySquares","squares","forEach","square","index","push","isEmpty","length","getWinner","winningCombos","res","el","i","winningIndex","clone","slice","makeMove","getStrikethroughStyles","this","Array","fill","minimax","board","thisScore","mult","maxScore","bestMove","empty","copy","border","customStyles","overlay","backgroundColor","ResultModal","isOpen","close","startNewGame","winner","StyledModal","onRequestClose","style","ModalWrapper","ModalTitle","ModalContent","className","ModalFooter","Button","onClick","styled","Modal","div","p","button","arr","Container","dims","Square","Marker","ButtonRow","Screen","Inner","ChooseText","SmallText","Strikethrough","styles","TicTacToe","useState","setGrid","human","computer","players","setPlayers","gameState","setGameState","nextMove","setNextMove","setWinner","mode","setMode","computerMoveCount","setComputerMoveCount","modalOpen","setModalOpen","choosePlayer","option","move","useCallback","gridCopy","computerMove","console","log","emptySquares","includes","useEffect","timeoutId","setTimeout","clearTimeout","winnerStr","document","querySelector","play","declareWinner","onChange","e","target","value","Object","keys","map","key","gameMode","isActive","humanMove","media-player","preload","id","crossOrigin","src","clickSound","winOrTieSound","lostSound","Header","logo","alt","Main","main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ad2c4dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click2.f12785be.mp3\";","module.exports = __webpack_public_path__ + \"static/media/winOrTie.62afed88.mp3\";","module.exports = __webpack_public_path__ + \"static/media/lost.535a4cf5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const BOARD_DIM=3;\r\nexport const DRAW=0;\r\nexport const PLAYER_X=1;\r\nexport const PLAYER_O=2;\r\nexport const SQUARE_DIM=100;\r\nexport const GAME_STAES={\r\n    notStarted:'not_started',\r\n    inProgress:'in_progress',\r\n    over:'over'\r\n};\r\nexport const SCORES={\r\n    1:1,\r\n    0:0,\r\n    2:-1\r\n};\r\nexport const GAME_MODES={\r\n    easy:'easy',\r\n    medium:'medium',\r\n    difficult:'difficult'\r\n    \r\n}\r\n\r\n\r\n","import {PLAYER_X,PLAYER_O} from './constants';\r\n\r\nexport const switchPlayer=(player)=>{\r\n    return player===PLAYER_X?PLAYER_O:PLAYER_X;\r\n};\r\nexport const getRandomInt=(min,max)=>{\r\n    min=Math.ceil(min);\r\n    max=Math.floor(max);\r\n    return Math.floor((Math.random()*(max-min+1)+min));\r\n};","import {BOARD_DIM,DRAW} from './constants';\r\n\r\nexport default class Board{\r\n    constructor(grid){\r\n        this.grid=grid|| new Array(BOARD_DIM**2).fill(null);\r\n        this.winningIndex=null;\r\n    }\r\n    // collect indices of empty squares and return them.\r\n    getEmptySquares=(grid=this.grid)=>{\r\n        let squares=[];\r\n        grid.forEach((square,index)=>{\r\n            if(square===null){\r\n                squares.push(index);\r\n            }\r\n        });\r\n        return squares;\r\n    }\r\n\r\n    isEmpty=(grid=this.grid)=>{\r\n        return this.getEmptySquares(grid).length===BOARD_DIM**2;\r\n    }\r\n\r\n    getWinner=(grid=this.grid)=>{\r\n        const winningCombos = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n          ];\r\n        let res=null;\r\n        winningCombos.forEach((el,i)=>{\r\n            if(grid[el[0]]!==null&&\r\n               grid[el[0]]===grid[el[1]] &&\r\n               grid[el[0]]===grid[el[2]]){\r\n\r\n                    res=grid[el[0]];\r\n                    this.winningIndex = i;\r\n            }\r\n            else if(res===null && this.getEmptySquares(grid).length===0){\r\n                res=DRAW;\r\n                this.winningIndex=null;\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    clone=()=>{\r\n        return new Board(this.grid.slice());\r\n    }\r\n    //makeMove function for using dummy moves for minmax function\r\n    makeMove=(square,player)=>{\r\n        if(this.grid[square]===null){\r\n            this.grid[square]=player;\r\n        }\r\n    }\r\n    //getting strikethrough styles based on winningIndex\r\n    getStrikethroughStyles = () => {\r\n        const defaultWidth = 285;\r\n        const diagonalWidth = 400;\r\n        switch (this.winningIndex) {\r\n          case 0:\r\n            return `\r\n              transform: none;\r\n              top: 41px;\r\n              left: 15px;\r\n              width: ${defaultWidth}px;\r\n            `;\r\n          case 1:\r\n            return `\r\n              transform: none;\r\n              top: 140px;\r\n              left: 15px;\r\n              width: ${defaultWidth}px;\r\n            `;\r\n          case 2:\r\n            return `\r\n              transform: none;\r\n              top: 242px;\r\n              left: 15px;\r\n              width: ${defaultWidth}px;\r\n            `;\r\n          case 3:\r\n            return `\r\n              transform: rotate(90deg);\r\n              top: 145px;\r\n              left: -86px;\r\n              width: ${defaultWidth}px;\r\n            `;\r\n          case 4:\r\n            return `\r\n              transform: rotate(90deg);\r\n              top: 145px;\r\n              left: 15px;\r\n              width: ${defaultWidth}px;\r\n            `;\r\n          case 5:\r\n            return `\r\n              transform: rotate(90deg);\r\n              top: 145px;\r\n              left: 115px;\r\n              width: ${defaultWidth}px;\r\n            `;\r\n          case 6:\r\n            return `\r\n              transform: rotate(45deg);\r\n              top: 145px;\r\n              left: -44px;\r\n              width: ${diagonalWidth}px;\r\n            `;\r\n          case 7:\r\n            return `\r\n              transform: rotate(-45deg);\r\n              top: 145px;\r\n              left: -46px;\r\n              width: ${diagonalWidth}px;\r\n            `;\r\n          default:\r\n            return null;\r\n        }\r\n      }\r\n}","import { SCORES } from \"./constants\";\r\nimport { switchPlayer } from \"./utils\";\r\n\r\nexport const minimax = (board, player) => {\r\n  const mult = SCORES[player];\r\n  let thisScore;\r\n  let maxScore = -1;\r\n  let bestMove = null;\r\n\r\n  if (board.getWinner() !== null) {\r\n    return [SCORES[board.getWinner()], 0];\r\n  } else {\r\n    for (let empty of board.getEmptySquares()) {\r\n      let copy = board.clone();\r\n      copy.makeMove(empty, player);\r\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n      if (thisScore >= maxScore) {\r\n        maxScore = thisScore;\r\n        bestMove = empty;\r\n      }\r\n    }\r\n\r\n    return [mult * maxScore, bestMove];\r\n  }\r\n};","export const border = `\r\n  border-bottom-left-radius: 15px 255px;\r\n  border-bottom-right-radius: 225px 15px;\r\n  border-top-left-radius: 255px 15px;\r\n  border-top-right-radius: 15px 225px;\r\n  border: 2px solid #41403e;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Modal from 'react-modal';\r\nimport {border} from './styles';\r\nimport './customStyles.css';\r\n\r\n\r\nconst customStyles={\r\n    overlay:{\r\n        backgroundColor:\"rgba(0,0,0,0.6)\",\r\n    }\r\n};\r\n\r\nexport const ResultModal=({isOpen,close,startNewGame,winner})=>{\r\n    return(\r\n        <StyledModal isOpen={isOpen} onRequestClose={close} style={customStyles}>\r\n            <ModalWrapper>\r\n                <ModalTitle> Game Over</ModalTitle>\r\n                <ModalContent className=\"floating-text\">{winner}</ModalContent>\r\n\r\n                <ModalFooter>\r\n                    <Button onClick={close}>close</Button>\r\n                    <Button onClick={startNewGame}>Start Over</Button>\r\n                </ModalFooter>\r\n            </ModalWrapper>\r\n        </StyledModal>\r\n    );\r\n\r\n};\r\n\r\nconst StyledModal=styled(Modal)`\r\n    display:flex;\r\n    flex-direction:column;\r\n    height:300px;\r\n    position:relative;\r\n    margin:0 auto;\r\n    top:15%;\r\n    right:auto;\r\n    bottom:auto;\r\n    width:80vh;\r\n    max-width:320px;\r\n\r\n\r\n`;\r\n\r\nconst ModalWrapper=styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n    padding:24px;\r\n    background-color:rgba(255,255,255,0.8);\r\n    max-height:100%;\r\n    height:100%;\r\n    align-items:center;\r\n    backface-visibility:hidden;\r\n    border:1px solid black;\r\n    ${border};\r\n`;\r\n\r\nconst ModalTitle = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst ModalContent = styled.p`\r\n  flex: 1 1 auto;\r\n  text-align: center;\r\n  font-size:30px;\r\n`;\r\n\r\nconst ModalFooter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex: 0 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 16px;\r\n`;","import React,{useState,useEffect,useCallback} from 'react';\r\nimport styled from 'styled-components';\r\nimport {BOARD_DIM,PLAYER_X,PLAYER_O,SQUARE_DIM,GAME_STAES,DRAW,GAME_MODES} from './constants';\r\nimport {getRandomInt,switchPlayer} from './utils';\r\nimport Board from './Board';\r\nimport {minimax} from './minimax';\r\nimport {ResultModal} from './ResultModal';\r\nimport {border} from './styles';\r\nimport clickSound from './sounds/click2.mp3';\r\nimport winOrTieSound from './sounds/winOrTie.mp3';\r\nimport lostSound from './sounds/lost.mp3';\r\n\r\n\r\nconst board= new Board(); \r\n\r\nconst arr= new Array(BOARD_DIM**2).fill(null);\r\n\r\nconst TicTacToe=()=>{\r\n    const [grid,setGrid]=useState(arr);\r\n    const [players,setPlayers]=useState({\r\n        human:null,\r\n        computer:null\r\n    });\r\n    const [gameState,setGameState]=useState(GAME_STAES.notStarted);\r\n    const [nextMove,setNextMove]=useState(null);\r\n    const [winner,setWinner]=useState(null);\r\n    const [mode,setMode]=useState(GAME_MODES.medium);\r\n    const [computerMoveCount,setComputerMoveCount]=useState(1);\r\n    const [modalOpen,setModalOpen]=useState(false);\r\n    \r\n\r\n    \r\n    const choosePlayer=(option)=>{\r\n        setPlayers({human:option,computer:switchPlayer(option)});\r\n        setGameState(GAME_STAES.inProgress);\r\n        setNextMove(PLAYER_X);\r\n    }\r\n\r\n    const move=useCallback((index,player)=>{\r\n        if(player&&gameState===GAME_STAES.inProgress){\r\n            setGrid((grid)=>{\r\n                const gridCopy=grid.slice();\r\n                gridCopy[index]=player;\r\n                return gridCopy;\r\n            });\r\n        }\r\n        \r\n    },[gameState]);\r\n\r\n    const computerMove=useCallback(()=>{\r\n        \r\n        console.log('computerMove runs');\r\n        const board=new Board(grid.slice());\r\n        const emptySquares=board.getEmptySquares(grid);\r\n        let index;\r\n        switch(mode){\r\n            case GAME_MODES.easy:\r\n                index=getRandomInt(0,8);\r\n                while(!emptySquares.includes(index)){\r\n                    index=getRandomInt(0,8);\r\n                }\r\n                break;\r\n            case GAME_MODES.medium:\r\n                const smartMove = !board.isEmpty() && computerMoveCount<=2;\r\n                if(smartMove){\r\n                    index=minimax(board,players.computer)[1];\r\n                }\r\n                else{\r\n                    index=getRandomInt(0,8);\r\n                    while(!emptySquares.includes(index)){\r\n                        index=getRandomInt(0,8);\r\n                    }\r\n                }\r\n                break;\r\n            case GAME_MODES.difficult:\r\n            default:\r\n                index=board.isEmpty(grid)?getRandomInt(0,8):\r\n                    minimax(board,players.computer)[1];\r\n\r\n        }\r\n         \r\n        if(!grid[index]){\r\n            setComputerMoveCount(computerMoveCount+1);\r\n            move(index,players.computer);\r\n            setNextMove(players.human);\r\n        }\r\n        \r\n        \r\n        \r\n    },[move,grid,players,mode,computerMoveCount]); \r\n\r\n    const humanMove=(index)=>{\r\n        if(!grid[index]&&nextMove===players.human){\r\n            document.querySelector('#clickAudio').play();\r\n            move(index,players.human);\r\n            setNextMove(players.computer);\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        \r\n        let timeoutId;\r\n        if(nextMove!==null &&\r\n           nextMove===players.computer &&\r\n           gameState!==GAME_STAES.over\r\n        ){\r\n            // delaying computer move to looks natural.\r\n            \r\n            timeoutId = setTimeout(()=>{\r\n                computerMove();\r\n            },700);\r\n        }\r\n        return ()=> timeoutId && clearTimeout(timeoutId);\r\n\r\n    },[nextMove,computerMove,players.computer,gameState]);\r\n\r\n    // useEffect for checking and declaring winner\r\n    useEffect(()=>{\r\n        const winner=board.getWinner(grid);\r\n        const declareWinner=(winner)=>{\r\n            let winnerStr;\r\n            switch(winner){\r\n                case players.human:\r\n                    winnerStr='you won!!!';\r\n                    break;\r\n                case players.computer:\r\n                    winnerStr='aw...you loose';\r\n                    break;\r\n                case DRAW:\r\n                default:\r\n                    winnerStr=`It's a draw...`;\r\n            }\r\n            setGameState(GAME_STAES.over);\r\n            setWinner(winnerStr);\r\n            setTimeout(()=>{\r\n                setModalOpen(true);\r\n                if(winnerStr!=='aw...you loose')\r\n                    document.querySelector('#winOrTieAudio').play();\r\n                else\r\n                document.querySelector('#lostAudio').play();\r\n            },800);\r\n        }\r\n\r\n        if(winner!==null && gameState!==GAME_STAES.over){\r\n            declareWinner(winner);\r\n        }\r\n    },[gameState,grid,nextMove,players.human,players.computer]);\r\n\r\n    const startNewGame=()=>{\r\n        setGameState(GAME_STAES.notStarted);\r\n        setGrid(arr);\r\n        setComputerMoveCount(0);\r\n        setModalOpen(false);\r\n    }\r\n    const changeMode=(e)=>{\r\n        setMode(e.target.value);\r\n    }\r\n\r\n    return gameState=== GAME_STAES.notStarted? (\r\n                <Screen>\r\n                    <Inner>\r\n                        <ChooseText>Choose Difficulty Level</ChooseText>\r\n                        <select onChange={changeMode} value={mode}>\r\n                            {\r\n                                Object.keys(GAME_MODES).map((key)=>{\r\n                                        const gameMode=GAME_MODES[key];\r\n                                        return(\r\n                                        <option key={gameMode} value={gameMode}> {gameMode}</option>\r\n                                        );\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </Inner>\r\n                    <Inner>\r\n                        <ChooseText> Choose your Marker</ChooseText>\r\n                        <ButtonRow>\r\n                            <button onClick={()=>choosePlayer(PLAYER_X)}>X</button>\r\n                            <p>or</p>\r\n                            <button onClick={()=>choosePlayer(PLAYER_O)}>O</button>\r\n                        </ButtonRow>\r\n                        <SmallText>X will play first</SmallText>\r\n                    </Inner>\r\n                </Screen>\r\n            ):(  \r\n                <Container dims={BOARD_DIM}>\r\n                  {grid.map((value, index) => {\r\n                    const isActive = value !== null;\r\n            \r\n                    return (\r\n                      <Square\r\n                        key={index}\r\n                        onClick={() =>{\r\n                            \r\n                            humanMove(index);} }\r\n                      >\r\n                        {isActive && <Marker>{value === PLAYER_X ? \"X\" : \"O\"}</Marker>}\r\n                      </Square>\r\n                    );\r\n                  })}\r\n\r\n                    <ResultModal\r\n                        isOpen={modalOpen}\r\n                        winner={winner}\r\n                        close={() => setModalOpen(false)}\r\n                        startNewGame={startNewGame}\r\n                    />\r\n                    <Strikethrough\r\n                        styles={\r\n                        gameState === GAME_STAES.over && board.getStrikethroughStyles()\r\n                        }\r\n                    />\r\n                    <audio media-player=\"audioPlayer\"  preload=\"auto\" id=\"clickAudio\"\r\n                crossOrigin=\"anonymous\" src={clickSound}></audio>\r\n                    <audio media-player=\"audioPlayer\"  preload=\"auto\" id=\"winOrTieAudio\"\r\n                crossOrigin=\"anonymous\" src={winOrTieSound}></audio>\r\n                    <audio media-player=\"audioPlayer\"  preload=\"auto\" id=\"lostAudio\"\r\n                crossOrigin=\"anonymous\" src={lostSound}></audio>\r\n                    \r\n                </Container>\r\n              );\r\n       \r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n};\r\n\r\nconst Container=styled.div`\r\n    display:flex;\r\n    justify-content:center;\r\n    width:${({dims})=>`${dims*(SQUARE_DIM+5)}px`};\r\n    flex-flow:wrap;\r\n    position:relative;\r\n`;\r\nconst Square=styled.div`\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n    width:${SQUARE_DIM}px;\r\n    height:${SQUARE_DIM}px;\r\n    \r\n    ${border};\r\n    &:hover{\r\n        cursor:pointer;\r\n    }\r\n`;\r\nconst Marker=styled.p`\r\n    font-size:68px;\r\n    color:#a626aa;\r\n`;\r\n\r\n\r\nconst ButtonRow=styled.div`\r\n    display:flex;\r\n    width:150px;\r\n    justify-content:space-between;    \r\n`;\r\nconst Screen=styled.div``;\r\nconst Inner=styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n    margin-bottom;30px;\r\n`;\r\nconst ChooseText=styled.p``;\r\nconst SmallText=styled.p`\r\n    font-size:0.7rem;\r\n`;\r\n\r\n\r\nconst Strikethrough = styled.div`\r\n    position: absolute;\r\n    ${({ styles }) => styles}\r\n    background-color: indianred;\r\n    height: 5px;\r\n    width: ${({ styles }) => !styles && \"0px\"};\r\n  `;\r\n\r\nexport default TicTacToe;","import React from 'react';\r\n\r\nimport './Header.css';\r\nimport logo from './logo.svg';\r\n\r\nconst Header=()=>{\r\n    return(\r\n        <div className=\"header\">\r\n            <img src={logo} className=\"Navbar-logo\" alt=\"logo\" />\r\n            <div> Tic Tac Toe</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\nimport 'papercss/dist/paper.min.css';\nimport TicTacToe from './TicTacToe';\nimport Header from './Header';\n\n\nconst Main=styled.main`\n  display:flex;\n  justify-content:center;\n  align-items:center;\n  height:100vh;\n`;\nfunction App(){\n  return(\n    <Main>\n      <Header></Header>\n      <TicTacToe/>\n      \n    </Main>\n  )\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}